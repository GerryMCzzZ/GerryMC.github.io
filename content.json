{"meta":{"title":"GerryMC的博客","subtitle":"","description":"","author":"GerryMC","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2021-01-15T08:44:12.000Z","updated":"2021-01-15T08:46:19.353Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2021-01-15T08:47:19.000Z","updated":"2021-01-15T08:47:54.659Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-01-15T08:45:42.000Z","updated":"2021-01-15T08:46:10.717Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java使用雪花id","slug":"snowflake","date":"2021-01-15T08:33:55.992Z","updated":"2021-01-15T09:07:29.654Z","comments":true,"path":"2021/01/15/snowflake/","link":"","permalink":"http://example.com/2021/01/15/snowflake/","excerpt":"概述雪花ID即SnowFlakeID，通常雪花ID是和分布式一起使用的。借鉴一下别人的介绍：SnowFlake是twitter公司内部分布式项目采用的ID生成算法，开源后广受国内大厂的好评。由这种算法生成的ID，我们就叫做SnowFlakeID SnowFlakeID的最大的特性就是天然去中心化，通过时间戳、工作机器编号两个变量进行配置后，通过SnowFlake算法会生成唯一的递增ID。在任何机器上，只要保证工作机器编号不同，就可以确保生成的ID唯一，且整体趋势是递增的 Snowflake的结构如下(每部分用-分开): 0 - 0000000000 0000000000 0000000000 0000000000 0 - 0000000000 - 000000000000","text":"概述雪花ID即SnowFlakeID，通常雪花ID是和分布式一起使用的。借鉴一下别人的介绍：SnowFlake是twitter公司内部分布式项目采用的ID生成算法，开源后广受国内大厂的好评。由这种算法生成的ID，我们就叫做SnowFlakeID SnowFlakeID的最大的特性就是天然去中心化，通过时间戳、工作机器编号两个变量进行配置后，通过SnowFlake算法会生成唯一的递增ID。在任何机器上，只要保证工作机器编号不同，就可以确保生成的ID唯一，且整体趋势是递增的 Snowflake的结构如下(每部分用-分开): 0 - 0000000000 0000000000 0000000000 0000000000 0 - 0000000000 - 000000000000 第一段1位为未使用，永远固定为0 第二段41位为毫秒级时间(41位的长度可以使用69年) 第三段10位为workerId(10位的长度最多支持部署1024个节点） 第三段12位为毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号） 如果按照1024的满节点（1个节点就是1个部署的服务）计算，每毫秒可生成的ID序号有1024*4096=4194304个，足以满足现在绝大多数的业务情况 算法的核心如下 ((当前时间 - 服务时间) &lt;&lt; timestampLeftShift) | (机器ID &lt;&lt; workerIdShift) | sequence; 服务时间指的是服务的开发时间，即第一个正式ID产生的时间。由于SnowFlakeID最长可用69年（因为只有41个bit，41个bit的最大值换算成年就是69年）。所以服务时间越贴近上线时间，则该算法可用时间越长。其中sequence为递增序列，当前时间戳和上一ID生成时间戳一致时，sequence就递增1，直到4096为止。 SnowFlake有什么问题SnowFlake很好，分布式、去中心化、无第三方依赖。但它并不是完美的，由于SnowFlake强依赖时间戳，所以时间的变动会造成SnowFlake的算法产生错误。 时钟回拨:最常见的问题就是时钟回拨导致的ID重复问题，在SnowFlake算法中并没有什么有效的解法，仅是抛出异常。时钟回拨涉及两种情况①实例停机→时钟回拨→实例重启→计算ID ②实例运行中→时钟回拨→计算ID 手动配置:另一个就是workerId（机器ID）是需要部署时手动配置，而workerId又不能重复。几台实例还好，一旦实例达到一定量级，管理workerId将是一个复杂的操作。 简介来源https://www.cnblogs.com/zer0Black/p/12323541.html 如何优化机器ID的配置需要自己按照自己的规范去执行，这需要人主观去解决。这里重点聊聊怎么解决时钟回拨的问题。引用的文章说的方案我就不说了，可以通过介绍链接地址去了解。我的工具类使用的方案是用变量记录上一个id的时间戳，如果当前的时间戳小于上一个的，那么就阻塞1s或者直接抛出异常，重新获取id。 干代码复制工具类代码，或者点击链接SnowFlakeUtil.java到我GitHub的开源项目中下载，里面还有其他开发中常用的工具类： package org.gerrymc.springbootutils.utils; /** * @Author GerryMC * @Description 生成雪花id工具类 * * @Date: 2020/5/15 0015 14:02 */ public class SnowFlakeUtil &#123; // ==============================Fields=========================================== /** 开始时间截 (2020-07-15) */ private final long twepoch = 1594800420694L; /** 机器id所占的位数 */ private final long workerIdBits = 5L; /** 数据标识id所占的位数 */ private final long datacenterIdBits = 5L; /** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */ private final long maxWorkerId = -1L ^ (-1L &lt;&lt; workerIdBits); /** 支持的最大数据标识id，结果是31 */ private final long maxDatacenterId = -1L ^ (-1L &lt;&lt; datacenterIdBits); /** 序列在id中占的位数 */ private final long sequenceBits = 12L; /** 机器ID向左移12位 */ private final long workerIdShift = sequenceBits; /** 数据标识id向左移17位(12+5) */ private final long datacenterIdShift = sequenceBits + workerIdBits; /** 时间截向左移22位(5+5+12) */ private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits; /** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */ private final long sequenceMask = -1L ^ (-1L &lt;&lt; sequenceBits); /** 工作机器ID(0~31) */ private long workerId; /** 数据中心ID(0~31) */ private long datacenterId; /** 毫秒内序列(0~4095) */ private long sequence = 0L; /** 上次生成ID的时间截 */ private long lastTimestamp = -1L; //==============================Constructors===================================== /** * 构造函数 * @param workerId 工作ID (0~31) * @param datacenterId 数据中心ID (0~31) */ public SnowFlakeUtil(long workerId, long datacenterId) &#123; if (workerId &gt; maxWorkerId || workerId &lt; 0) &#123; throw new IllegalArgumentException(String.format(&quot;worker Id can&#39;t be greater than %d or less than 0&quot;, maxWorkerId)); &#125; if (datacenterId &gt; maxDatacenterId || datacenterId &lt; 0) &#123; throw new IllegalArgumentException(String.format(&quot;datacenter Id can&#39;t be greater than %d or less than 0&quot;, maxDatacenterId)); &#125; this.workerId = workerId; this.datacenterId = datacenterId; &#125; // ==============================Methods========================================== /** * 获得下一个ID (该方法是线程安全的) * @return SnowflakeId */ public synchronized long nextId() &#123; long timestamp = timeGen(); //如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常 if (timestamp &lt; lastTimestamp) &#123; throw new RuntimeException( String.format(&quot;Clock moved backwards. Refusing to generate id for %d milliseconds&quot;, lastTimestamp - timestamp)); &#125; //如果是同一时间生成的，则进行毫秒内序列 if (lastTimestamp == timestamp) &#123; sequence = (sequence + 1) &amp; sequenceMask; //毫秒内序列溢出 if (sequence == 0) &#123; //阻塞到下一个毫秒,获得新的时间戳 timestamp = tilNextMillis(lastTimestamp); &#125; &#125; //时间戳改变，毫秒内序列重置 else &#123; sequence = 0L; &#125; //上次生成ID的时间截 lastTimestamp = timestamp; //移位并通过或运算拼到一起组成64位的ID return ((timestamp - twepoch) &lt;&lt; timestampLeftShift) // | (datacenterId &lt;&lt; datacenterIdShift) // | (workerId &lt;&lt; workerIdShift) // | sequence; &#125; /** * 阻塞到下一个毫秒，直到获得新的时间戳 * @param lastTimestamp 上次生成ID的时间截 * @return 当前时间戳 */ protected long tilNextMillis(long lastTimestamp) &#123; long timestamp = timeGen(); while (timestamp &lt;= lastTimestamp) &#123; timestamp = timeGen(); &#125; return timestamp; &#125; /** * 返回以毫秒为单位的当前时间 * @return 当前时间(毫秒) */ protected long timeGen() &#123; return System.currentTimeMillis(); &#125; /** * 单次获取雪花id * @return */ public static long getSnowflakeId()&#123; SnowFlakeUtil snowFlakeUtil = new SnowFlakeUtil(1, 1); return snowFlakeUtil.nextId(); &#125; &#125; 使用方式：1.单个id赋值，每次初始化实例。 long snowFlakeId = SnowFlakeUtil.getSnowflakeId(); 2.批量id赋值，一般是数据处理好了可以统一赋值id。 //初始化雪花id类，参数机器ID，数据中心ID（用于分布式扩展） SnowFlakeUtil snowFlake = new SnowFlakeUtil(1, 1); for (int i = 0; i &lt; num; i++) &#123; System.out.println(snowFlake.nextId()); &#125;","categories":[],"tags":[]},{"title":"Java使用阿里云短信服务","slug":"aliyun_sms","date":"2021-01-15T08:28:42.440Z","updated":"2021-01-15T09:06:57.140Z","comments":true,"path":"2021/01/15/aliyun_sms/","link":"","permalink":"http://example.com/2021/01/15/aliyun_sms/","excerpt":"一、准备工作首先要开通阿里云的短信服务，然后在控制台中找到短信服务。进入后就是以下界面。其中我们需要4个东西：accessKeyId、accessKeySecret、短信模板和短信签名。","text":"一、准备工作首先要开通阿里云的短信服务，然后在控制台中找到短信服务。进入后就是以下界面。其中我们需要4个东西：accessKeyId、accessKeySecret、短信模板和短信签名。 获取AcessKey：accessKeyId、accessKeySecret是阿里云API的密钥，阿里云许多产品都需要他们绑定，所以需要注意防护。进入AccessKey页面通过短信获取即可，第一次使用的话需要创建一个，如下图所示。 短信签名申请：需要注意的是短信签名不需要自己添加【】、()、[]符号，签名发送会自带【】符号，避免重复。其余个人和企业账户规则可在申请规范中详细查看。如下图： 短信模板申请：1、选择模板类型。2、设置模板名称。3、设置模板内容：最终短信会显示的内容，变量用${code}占用。4、填写申请说明。示例及模板预览如下图： 二、代码实现引入阿里云短信SDK&lt;dependency&gt; &lt;groupId&gt;com.aliyun&lt;/groupId&gt; &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt; &lt;version&gt;3.7.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.aliyun&lt;/groupId&gt; &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt; &lt;/dependency&gt; 示例工具类/** * @author CXD * @Description 阿里云发送短信工具类 * @date 2021/1/4 */ public class AlySmsUtils &#123; // 产品名称:云通信短信API产品,开发者无需替换 static final String product = &quot;Dysmsapi&quot;; // 产品域名,开发者无需替换 static final String domain = &quot;dysmsapi.aliyuncs.com&quot;; // TODO 此处需要替换成开发者自己的AK(在阿里云访问控制台寻找) static final String accessKeyId = &quot;********&quot;; static final String accessKeySecret = &quot;***********&quot;; //自定义短信静态类 public static void smsToTest(String telephone, String code) throws ClientException &#123; String templateCode = &quot;SMS_123456789&quot;; //在阿里云官网注册的短信模板码 sendSms(telephone,code, templateCode); &#125; public static SendSmsResponse sendSms(String telephone, String code, String templateCode) throws ClientException &#123; // 可自助调整超时时间 System.setProperty(&quot;sun.net.client.defaultConnectTimeout&quot;, &quot;10000&quot;); System.setProperty(&quot;sun.net.client.defaultReadTimeout&quot;, &quot;10000&quot;); // 初始化acsClient,暂不支持region化 IClientProfile profile = DefaultProfile.getProfile(&quot;cn-hangzhou&quot;, accessKeyId, accessKeySecret); DefaultProfile.addEndpoint(&quot;cn-hangzhou&quot;, &quot;cn-hangzhou&quot;, product, domain); IAcsClient acsClient = new DefaultAcsClient(profile); // 组装请求对象-具体描述见控制台-文档部分内容 SendSmsRequest request = new SendSmsRequest(); // 必填:待发送手机号 request.setPhoneNumbers(telephone); // 必填:短信签名-可在短信控制台中找到 request.setSignName(&quot;测试模板&quot;); //阿里官网注册的短信签名名称 // 必填:短信模板-可在短信控制台中找到 request.setTemplateCode(templateCode); // 可选:模板中的变量替换JSON串,如模板内容为&quot;亲爱的用户,您的验证码为$&#123;code&#125;&quot;时,此处的值为 request.setTemplateParam(&quot;&#123;\\&quot;code\\&quot;:\\&quot;&quot; + code + &quot;\\&quot;&#125;&quot;); // 选填-上行短信扩展码(无特殊需求用户请忽略此字段) // request.setSmsUpExtendCode(&quot;90997&quot;); // 可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者 request.setOutId(&quot;yourOutId&quot;); // hint 此处可能会抛出异常，注意catch SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request); if (sendSmsResponse.getCode() != null &amp;&amp; sendSmsResponse.getCode().equals(&quot;OK&quot;)) &#123; System.out.println(&quot;短信发送成功！&quot;); &#125; else &#123; System.out.println(&quot;短信发送失败！&quot;); &#125; return sendSmsResponse; &#125; &#125; 使用测试类 //发送短信验证码 public static void SmsCode() throws ClientException &#123; //发送信息的手机号 String telephone = &quot;12345678910&quot;; //发送的验证码 String code = &quot;666666&quot;; //发送的短信模板（阿里云平台设置） String templateCode = &quot;SMS_132695077&quot;; AlySmsUtils.sendSms(telephone, code, templateCode); &#125; public static void main(String[] args) throws ClientException &#123; SmsCode(); &#125;","categories":[],"tags":[]}],"categories":[],"tags":[]}